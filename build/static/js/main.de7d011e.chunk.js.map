{"version":3,"sources":["Person.jsx","Persons.jsx","Filter.jsx","PersonForm.jsx","services/persons.js","Notification.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Person","name","number","Persons","persons","onDeletePerson","map","person","key","id","onClick","Filter","searchString","onChange","value","PersonForm","onNameChange","onNumberChange","onSubmit","required","type","baseUrl","Axios","get","then","response","data","personData","post","put","delete","Notification","message","text","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setSearchString","showAll","setShowAll","setMessage","useEffect","personService","initialPersons","personsToShow","filter","toLowerCase","includes","e","target","preventDefault","existingPerson","newPerson","some","confirm","find","updatedPerson","catch","error","setTimeout","concat","personToDelete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de7d011e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Person = ({ name, number }) => (\n  <span>\n    {name} {number}\n  </span>\n);\n\nexport default Person;\n","import React from 'react';\nimport Person from './Person';\n\nconst Persons = ({ persons, onDeletePerson }) => {\n  return (\n    <>\n      {persons.map(person => (\n        <div key={person.id}>\n          <Person name={person.name} number={person.number} />\n          <button onClick={() => onDeletePerson(person)}>delete</button>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default Persons;\n","import React from 'react'\n\nconst Filter = ({searchString, onChange}) => {\n  return (\n    <p>\n      <span>filter shown with </span>\n      <input value={searchString} onChange={onChange} />\n    </p>\n  )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst PersonForm = ({name, number, onNameChange, onNumberChange, onSubmit}) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name:\n          <input value={name} onChange={onNameChange} required />\n      </div>\n      <div>\n        number:\n          <input value={number} onChange={onNumberChange} required />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm\n","import Axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  return Axios.get(baseUrl).then(\n    response => response.data\n  );\n};\n\nconst create = personData => {\n  return Axios.post(baseUrl, personData).then(\n    response => response.data\n  );\n};\n\nconst update = (id, personData) => {\n  return Axios.put(`${baseUrl}/${id}`, personData).then(\n    response => response.data\n  );\n};\n\nconst deletePerson = id => {\n  return Axios.delete(`${baseUrl}/${id}`).then(\n    response => response.data\n  );\n};\n\nexport default { getAll, create, update, deletePerson };\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) return null;\n  const { text, type } = message;\n  return <div className={`notification ${type}`}>{text}</div>;\n};\n\nexport default Notification;\n","/* eslint-disable no-restricted-globals */\nimport React, { useState, useEffect } from 'react';\nimport Persons from './Persons';\nimport Filter from './Filter';\nimport PersonForm from './PersonForm';\nimport personService from './services/persons';\nimport Notification from './Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [searchString, setSearchString] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => setPersons(initialPersons));\n  }, []);\n\n  const personsToShow = showAll\n    ? persons\n    : persons.filter(person =>\n        person.name.toLowerCase().includes(searchString.toLowerCase())\n      );\n\n  const handleNewNameChange = e => {\n    setNewName(e.target.value);\n  };\n\n  const handleNewNumberChange = e => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleSearchStringChange = e => {\n    setSearchString(e.target.value);\n    if (searchString) setShowAll(false);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n\n    if (persons.some(person => person.name === newName)) {\n      if (\n        confirm(\n          `${newName} is already added to the phonebook, replace the old number with a new one?`\n        )\n      ) {\n        let existingPerson;\n        existingPerson = { ...persons.find(person => person.name === newName) };\n        return personService\n          .update(existingPerson.id, newPerson)\n          .then(updatedPerson => {\n            setPersons(\n              persons.map(person =>\n                person.id === updatedPerson.id ? updatedPerson : person\n              )\n            );\n            setNewName('');\n            setNewNumber('');\n          })\n          .catch(error => {\n            setMessage({\n              text: `Information of ${existingPerson.name} has already been removed from server`,\n              type: 'error',\n            });\n            setTimeout(() => {\n              setMessage(null);\n            }, 5000);\n            setPersons(persons.filter(person => person.name !== newName))\n          });\n      }\n    }\n    return personService\n      .create(newPerson)\n      .then(person => {\n        setPersons(persons.concat(person));\n        setNewName('');\n        setNewNumber('');\n        setMessage({ text: `Added ${person.name}`, type: 'success' });\n        setTimeout(() => {\n          setMessage(null);\n        }, 5000);\n      }).catch(error => {\n        setMessage({text: error.response.data.error, type: 'error'});\n        setTimeout(() => {\n          setMessage(null);\n        }, 5000);\n      });\n  };\n\n  const handleDeletePerson = personToDelete => {\n    if (confirm(`Delete ${personToDelete.name}?`))\n      personService\n        .deletePerson(personToDelete.id)\n        .then(() =>\n          setPersons(persons.filter(person => person.id !== personToDelete.id))\n        );\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={message} />\n\n      <Filter searchString={searchString} onChange={handleSearchStringChange} />\n\n      <h3>Add a new</h3>\n\n      <PersonForm\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNewNameChange}\n        onNumberChange={handleNewNumberChange}\n        onSubmit={handleSubmit}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons persons={personsToShow} onDeletePerson={handleDeletePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}